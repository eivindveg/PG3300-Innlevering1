using System.Collections.Concurrent;

namespace SnakeMess
{
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The board.
    /// </summary>
    public class Board
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// </summary>
        /// <param name="dimension">
        /// The dimension.
        /// </param>
        /// <param name="players">
        /// The players.
        /// </param>
        public Board(Vector dimension, List<Player> players)
        {
            Random = new Random();
            Dimension = dimension;
            Players = players;
            Apples = new ConcurrentBag<Apple>();
            PositionSnakes();
        }

        public Board(Vector dimension, Player player)
        {
            Random = new Random();
            Dimension = dimension;
            Players = new List<Player>
                          {
                              player
                          };
            Apples = new ConcurrentBag<Apple>();
            this.PositionSnakes();
        }

        /// <summary>
        /// Gets the dimension.
        /// </summary>
        public Vector Dimension { get; private set; }

        public ConcurrentBag<Apple> Apples { get; set; }

        public List<Player> Players { get; set; }

        private Random Random { get; set; }

        public Vector PlaceApple()
        {
            Apple apple;
            for (;;)
            {
                var x = Random.Next(0, Dimension.X);
                var y = Random.Next(0, Dimension.Y);
                apple = new Apple(EdibleType.RedApple, new Vector(x, y));
                var spot = false;
                foreach (var player in Players)
                {
                    if (player.Snake.IsInPosition(apple.Position))
                    {
                        spot = true;
                        break;
                    }
                }
                if (spot)
                {
                    break;
                }
            }
            Apples.Add(apple);
            return apple.Position;
        }

        private void PositionSnakes()
        {
            foreach (var player in Players)
            {
                var position = new Vector();
                var direction = Direction.Right;
                switch (player.Id)
                {
                    case 1:
                        position = new Vector(Dimension.X / 4, Dimension.Y / 4);
                        direction = Direction.Right;
                        break;
                    case 2:
                        position = new Vector(Dimension.X - (Dimension.X / 4), Dimension.Y / 4);
                        direction = Direction.Left;
                        break;
                    case 3:
                        position = new Vector(Dimension.X / 4, Dimension.Y - (Dimension.Y / 4));
                        direction = Direction.Right;
                        break;
                    case 4:
                        position = new Vector(Dimension.X - (Dimension.X / 4), Dimension.Y - (Dimension.Y / 4));
                        direction = Direction.Up;
                        break;
                }
                var snake = new Snake(direction, position);
                player.Snake = snake;
            }
        }
    }
}
