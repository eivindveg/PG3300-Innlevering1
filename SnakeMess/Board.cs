namespace SnakeMess
{
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The board.
    /// </summary>
    public class Board
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// </summary>
        /// <param name="dimension">
        /// The dimension.
        /// </param>
        /// <param name="snakes">
        /// The snakes.
        /// </param>
        public Board(Vector dimension, List<Snake> snakes)
        {
            Dimension = dimension;
            Snakes = snakes;
            PositionSnakes();
        }

        /// <summary>
        /// Gets the dimension.
        /// </summary>
        public Vector Dimension { get; private set; }

        /// <summary>
        /// Gets or sets the Apples.
        /// </summary>
        public List<Apple> Apples { get; set; }

        /// <summary>
        /// Gets or sets the snakes.
        /// </summary>
        public List<Snake> Snakes { get; set; }

        /// <summary>
        /// The Position snakes.
        /// </summary>
        private void PositionSnakes()
        {
            foreach (var snake in Snakes)
            {
                var position = GetPositionFor(snake.player.id);
                Component head = snake.components.First();
                head.Position = position;
            }
        }

        /// <summary>
        /// The get Position for.
        /// </summary>
        /// <param name="id">
        /// The id.
        /// </param>
        /// <returns>
        /// The <see cref="Vector"/>.
        /// </returns>
        /// <exception cref="Exception">
        /// If trying to find a player that cannot exist.
        /// </exception>
        private Vector GetPositionFor(int id)
        {
            if (id <= 0 || id > 4)
            {
                throw new Exception("Unsupported number of players!");
            }

            var position = new Vector();
            switch (id)
            {
                case 1:
                    position.x = Dimension.x / 4;
                    position.y = Dimension.y / 4;
                    break;
                case 2:
                    position.x = Dimension.x - (Dimension.x / 4);
                    position.y = Dimension.y / 4;
                    break;
                case 3:
                    position.x = Dimension.x / 4;
                    position.y = Dimension.y - (Dimension.y / 4);
                    break;
                case 4:
                    position.x = Dimension.x - (Dimension.x / 4);
                    position.y = Dimension.y - (Dimension.y / 4);
                    break;
            }

            return position;
        }
    }
}
